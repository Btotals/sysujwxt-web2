// Generated by CoffeeScript 1.4.0
(function() {
  var drawData, exports, genCreditRow, genGChartUrl, getDistributedScore, getEarnedCredit, getGpa, getRequiredCredit, getScore, getTno, organizeCredits;

  exports = this;

  getScore = function(ctx, year, term) {
    return $.ajax({
      url: "/api/score",
      context: ctx,
      data: {
        year: year,
        term: term
      }
    });
  };

  getGpa = function(year, term) {
    return $.ajax({
      url: "/api/gpa",
      data: {
        year: year,
        term: term
      }
    });
  };

  getTno = function() {
    return $.ajax({
      url: "/api/tno",
      async: false,
      success: function(res) {
        var nums;
        nums = eval("nums = " + res).body.parameters.result;
        exports.grade = nums.split(",")[1];
        return exports.tno = nums.split(",")[2];
      }
    });
  };

  getRequiredCredit = function() {
    if (!(typeof grade !== "undefined" && grade !== null) || !(typeof tno !== "undefined" && tno !== null)) {
      getTno();
    }
    return $.get("/api/required_credit", {
      grade: grade,
      tno: tno
    }, function(res) {
      return console.log(res);
    });
  };

  getEarnedCredit = function() {
    return $.get("/api/earned_credit", function(res) {
      return console.log(res);
    });
  };

  organizeCredits = function(req_cdts, earn_cdts, gpas) {
    var credits, earn_cdt, gpa, gpaWeight, req_cdt, _i, _j, _k, _len, _len1, _len2;
    credits = {
      "公必": {},
      "专必": {},
      "公选": {},
      "专选": {},
      "实践": {},
      "总览": {
        "req_cdt": 0,
        "earn_cdt": 0,
        "gpa": 0
      }
    };
    for (_i = 0, _len = req_cdts.length; _i < _len; _i++) {
      req_cdt = req_cdts[_i];
      credits[req_cdt.oneColumn.slice(0, 2)]["req_cdt"] = parseInt(req_cdt.twoColumn);
      credits["总览"]["req_cdt"] += parseInt(req_cdt.twoColumn);
    }
    for (_j = 0, _len1 = earn_cdts.length; _j < _len1; _j++) {
      earn_cdt = earn_cdts[_j];
      credits[earn_cdt.oneColumn.slice(0, 2)]["earn_cdt"] = parseInt(earn_cdt.twoColumn);
      credits["总览"]["earn_cdt"] += parseInt(earn_cdt.twoColumn);
    }
    for (_k = 0, _len2 = gpas.length; _k < _len2; _k++) {
      gpa = gpas[_k];
      credits[gpa.oneColumn.slice(0, 2)]["gpa"] = parseFloat(gpa.twoColumn);
      gpaWeight = parseFloat(gpa.twoColumn) * credits[gpa.oneColumn.slice(0, 2)]["earn_cdt"];
      credits["总览"]["gpa"] += gpaWeight;
    }
    credits["总览"]["gpa"] /= credits["总览"]["earn_cdt"];
    credits["总览"]["gpa"] = credits["总览"]["gpa"].toFixed(3);
    return credits;
  };

  genCreditRow = function(credit, rowName) {
    var length, maxCredit, maxWidth, successTd, tr;
    if (!(credit.gpa != null) || !(credit.req_cdt != null) || !(credit.earn_cdt != null)) {
      return;
    }
    maxWidth = 420;
    maxCredit = 100;
    successTd = '<td><span class="label label-success"><i class="icon-ok icon-white"></i></span></td>';
    tr = $("<tr>");
    tr.append($("<th>").text(rowName));
    tr.append($("<td>").text(credit.gpa));
    tr.append($("<td>").text(credit.earn_cdt + "/" + credit.req_cdt));
    if (credit.earn_cdt === credit.req_cdt) {
      tr.append(successTd);
      return tr.append($("<td>").append($("<div>").addClass("progress").addClass("progress-striped").data("length", (length = credit.req_cdt / maxCredit * maxWidth) > maxWidth ? maxWidth : length).width(0).append($("<div>").addClass("bar").addClass("bar-success").data("length", credit.earn_cdt / credit.req_cdt * 100 + "%")))).width(0);
    } else {
      tr.append($("<td>").append($("<span>").addClass("label").text(credit.earn_cdt - credit.req_cdt)));
      tr.append($("<td>").append($("<div>").addClass("progress").addClass("progress-striped").data("length", (length = credit.req_cdt / maxCredit * maxWidth) > maxWidth ? maxWidth : length).width(0).append($("<div>").addClass("bar").data("length", credit.earn_cdt / credit.req_cdt * 100 + "%")))).width(0);
      return tr;
    }
  };

  genGChartUrl = function(scores, type) {
    var url;
    scores = scores.join(",");
    return url = "http://chart.apis.google.com/chart?chs=600x200&chd=t:" + scores + "&cht=p3&chhco=ff0000&chl=<60|60-69|70-79|80-89|90-100";
  };

  getDistributedScore = function(scores) {
    var detail, ret, score, _i, _len;
    ret = [['ID', '分数', '学分', '时间', '绩点']];
    for (_i = 0, _len = scores.length; _i < _len; _i++) {
      score = scores[_i];
      detail = [];
      detail.push(score.jxbmc && score.kcmc ? score.jxbmc + score.kcmc : score.jxbmc || score.kcmc);
      detail.push(parseFloat(score.zzcj));
      detail.push(parseFloat(score.xf));
      detail.push(score.xnd);
      detail.push(parseFloat(score.jd));
      ret.push(detail);
    }
    return ret;
  };

  drawData = function(data, ele) {
    var chart, options;
    data = google.visualization.arrayToDataTable(data);
    options = {
      title: '大学成绩分布图',
      hAxis: {
        title: '分数'
      },
      vAxis: {
        title: '学分',
        minValue: 0,
        maxValue: 7
      },
      bubble: {
        textStyle: {
          color: 'none'
        }
      }
    };
    chart = new google.visualization.BubbleChart(ele);
    return chart.draw(data, options);
  };

  $(function() {
    $.when(getRequiredCredit(), getEarnedCredit(), getGpa()).done(function() {
      var credits, delay, earn_cdts, gpas, req_cdts, rowName, tbody, _i, _len, _ref;
      req_cdts = eval("req_cdts = " + arguments[0][0]).body.dataStores.zxzyxfStore.rowSet.primary;
      earn_cdts = eval("earn_cdts = " + arguments[1][0]).body.dataStores.xfStore.rowSet.primary;
      gpas = eval("gpas = " + arguments[2][0]).body.dataStores.jdStore.rowSet.primary;
      console.log(credits = organizeCredits(req_cdts, earn_cdts, gpas));
      tbody = $("<tbody>");
      _ref = ["公必", "专必", "专选", "公选", "实践", "总览"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rowName = _ref[_i];
        tbody.append(genCreditRow(credits[rowName], rowName));
      }
      $("#credit-chart").append(tbody);
      delay = function(ms, func) {
        return setTimeout(func, ms);
      };
      return delay(10, function() {
        return $("#credit-chart").find("div").each(function() {
          return $(this).width($(this).data("length"));
        });
      });
    });
    $('.term-btn-group .btn').click(function(event) {
      var term, year;
      term = $(this).val();
      year = $('#year').val();
      toggleLoadingScene('#score-result', $loadingSpinner);
      return getScore($("#score-result")[0], year, term).done(function(res) {
        var $tbl, $tblBody, $tblHead, score, scores, _i, _len;
        checkRes(res, this);
        scores = eval('tableJson = ' + res).body.dataStores.kccjStore.rowSet.primary;
        if (scores.length === 0) {
          toggleLoadingScene(this, $lol);
          return;
        }
        $tblHead = $('<thead>').append($('<tr>').append($('<th>').html($('<span>').attr('class', 'label').text('类型')).append(' 课程'), $('<th>').text('学分'), $('<th>').text('成绩'), $('<th>').text('绩点'), $('<th>').text('教学班排名')));
        $tblBody = $('<tbody>');
        for (_i = 0, _len = scores.length; _i < _len; _i++) {
          score = scores[_i];
          $tblBody.append($('<tr>').append($('<th>').html($('<span>').attr('class', 'label').text(courseTypeTable[score.kclb])).append(' ' + score.kcmc), $('<td>').text(score.xf), $('<td>').text(score.zzcj), $('<td>').text(score.jd), $('<td>').text(score.jxbpm)));
        }
        $tbl = $('<table>').attr({
          'class': 'table table-condensed table-hover'
        }).append($tblHead, $tblBody);
        return toggleLoadingScene(this, $tbl, true);
      }).fail(function() {
        return $(this).html("请求失败，再试一次？");
      });
    });
    return $("#gpa-query-btn").click(function() {
      toggleLoadingScene('#gpa-chart', $loadingSpinner);
      return getScore($("#gpa-chart")[0]).done(function(res) {
        var distributedScore, scores;
        if (checkRes(res, this)) {
          scores = eval("scores =" + res).body.dataStores.kccjStore.rowSet.primary;
          distributedScore = getDistributedScore(scores);
          console.log(distributedScore);
          return drawData(distributedScore, this);
        }
      }).fail(function() {
        return $(this).html("请求失败，再试一次？");
      });
    });
  });

}).call(this);
